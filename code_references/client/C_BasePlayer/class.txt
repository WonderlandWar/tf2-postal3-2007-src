class C_BasePlayer : public C_BaseCombatCharacter
{
    public int YouForgotToImplementOrDeclareClientClass();
    public class ClientClass * GetClientClass();
    public class RecvTable * m_pClassRecvTable;
    public struct typedescription_t m_PredDesc[0];
    public struct datamap_t m_PredMap;
    public struct datamap_t * GetPredDescMap();
    private void C_BasePlayer(class C_BasePlayer & );
    public void C_BasePlayer();
    public void ~C_BasePlayer();
    public void Spawn();
    public void SharedSpawn();
    public void OnPreDataChanged(enum DataUpdateType_t );
    public void OnDataChanged(enum DataUpdateType_t );
    public void PostDataUpdate(enum DataUpdateType_t );
    public void ReceiveMessage(int ,class bf_read & );
    public void OnRestore();
    public void AddEntity();
    public void MakeTracer(class Vector & ,class CGameTrace & ,int );
    public void GetToolRecordingState(class KeyValues * );
    public void SetAnimationExtension(char * );
    public class C_BaseViewModel * GetViewModel(int );
    public class C_BaseCombatWeapon * GetActiveWeapon();
    public char * GetTracerType();
    public void CalcView(class Vector & ,class QAngle & ,float & ,float & ,float & );
    public void CalcViewModelView(class Vector & ,class QAngle & );
    public void SmoothViewOnStairs(class Vector & );
    public float CalcRoll(class QAngle & ,class Vector & ,float ,float );
    public void CalcViewRoll(class QAngle & );
    public void CreateWaterEffects();
    public void SetPlayerUnderwater(bool );
    public void UpdateUnderwaterState();
    public bool IsPlayerUnderwater();
    public class Vector Weapon_ShootPosition();
    public void Weapon_DropPrimary();
    public class Vector GetAutoaimVector(float );
    public void SetSuitUpdate(char * ,int ,int );
    public void CreateMove(float ,class CUserCmd * );
    public void AvoidPhysicsProps(class CUserCmd * );
    public void PlayerUse();
    public class C_BaseEntity * FindUseEntity();
    public bool IsUseableEntity(class C_BaseEntity * ,unsigned int );
    public bool IsPlayer();
    public int GetHealth();
    public int GetBonusProgress();
    public int GetBonusChallenge();
    public int GetObserverMode();
    public class C_BaseEntity * GetObserverTarget();
    public void SetObserverTarget(class CHandle<C_BaseEntity> );
    public bool AudioStateIsUnderwater(class Vector );
    public bool IsObserver();
    public bool IsHLTV();
    public void ResetObserverMode();
    public bool IsBot();
    public class Vector EyePosition();
    public class QAngle & EyeAngles();
    public void EyePositionAndVectors(class Vector * ,class Vector * ,class Vector * ,class Vector * );
    public class QAngle & LocalEyeAngles();
    public class IRagdoll * GetRepresentativeRagdoll();
    public void GetRagdollInitBoneArrays(struct matrix3x4_t * ,struct matrix3x4_t * ,struct matrix3x4_t * ,float );
    public void EyeVectors(class Vector * ,class Vector * ,class Vector * );
    public void CacheVehicleView();
    public bool IsSuitEquipped();
    public void TeamChange(int );
    public void Flashlight();
    public void UpdateFlashlight();
    public bool IsAllowedToSwitchWeapons();
    public class C_BaseCombatWeapon * GetActiveWeaponForSelection();
    public class C_BaseAnimating * GetRenderedWeaponModel();
    public bool IsOverridingViewmodel();
    public int DrawOverriddenViewmodel(class C_BaseViewModel * ,int );
    public float GetDefaultAnimSpeed();
    public void SetMaxSpeed(float );
    public float MaxSpeed();
    public enum ShadowType_t ShadowCastType();
    public bool ShouldReceiveProjectedTextures(int );
    public bool IsLocalPlayer();
    public void ThirdPersonSwitch(bool );
    public bool ShouldDrawLocalPlayer();
    public class C_BasePlayer * GetLocalPlayer();
    public int GetUserID();
    public bool CanSetSoundMixer();
    public bool ViewModel_IsTransparent();
    public void AddToPlayerSimulationList(class C_BaseEntity * );
    public void SimulatePlayerSimulatedEntities();
    public void RemoveFromPlayerSimulationList(class C_BaseEntity * );
    public void ClearPlayerSimulationList();
    public void PhysicsSimulate();
    public unsigned int PhysicsSolidMaskForEntity();
    public bool ShouldPredict();
    public void PreThink();
    public void PostThink();
    public void ItemPreFrame();
    public void ItemPostFrame();
    public void AbortReload();
    public void SelectLastItem();
    public void Weapon_SetLast(class C_BaseCombatWeapon * );
    public bool Weapon_ShouldSetLast(class C_BaseCombatWeapon * ,class C_BaseCombatWeapon * );
    public bool Weapon_ShouldSelectItem(class C_BaseCombatWeapon * );
    public bool Weapon_Switch(class C_BaseCombatWeapon * ,int );
    public class C_BaseCombatWeapon * GetLastWeapon();
    public void ResetAutoaim();
    public void SelectItem(char * ,int );
    public void UpdateClientData();
    public float GetFOV();
    public int GetDefaultFOV();
    public bool IsZoomed();
    public bool SetFOV(class C_BaseEntity * ,int ,float ,int );
    public void ClearZoomOwner();
    public float GetFOVDistanceAdjustFactor();
    public void ViewPunch(class QAngle & );
    public void ViewPunchReset(float );
    public void UpdateButtonState(int );
    public int GetImpulse();
    public void Simulate();
    public bool ShouldInterpolate();
    public bool ShouldDraw();
    public int DrawModel(int );
    public void OverrideView(class CViewSetup * );
    public char * GetPlayerName();
    public const class Vector GetPlayerMins();
    public const class Vector GetPlayerMaxs();
    public bool IsPlayerDead();
    public bool IsPoisoned();
    public class C_BaseEntity * GetUseEntity();
    public class IClientVehicle * GetVehicle();
    public bool IsInAVehicle();
    public void SetVehicleRole(int );
    public void LeaveVehicle();
    public bool UsingStandardWeaponsInVehicle();
    public void SetAnimation(enum PLAYER_ANIM );
    public float GetTimeBase();
    public float GetFinalPredictedTime();
    public bool IsInVGuiInputMode();
    public bool IsInViewModelVGuiInputMode();
    public class C_CommandContext * GetCommandContext();
    public int CurrentCommandNumber();
    public class CUserCmd * GetCurrentUserCommand();
    public class QAngle & GetPunchAngle();
    public void SetPunchAngle(class QAngle & );
    public float GetWaterJumpTime();
    public void SetWaterJumpTime(float );
    public float GetSwimSoundTime();
    public void SetSwimSoundTime(float );
    public float GetDeathTime();
    public float GetMinFOV();
    public void DoMuzzleFlash();
    public void PlayPlayerJingle();
    public void UpdateStepSound(struct surfacedata_t * ,class Vector & ,class Vector & );
    public void PlayStepSound(class Vector & ,struct surfacedata_t * ,float ,bool );
    public struct surfacedata_t * GetFootstepSurface(class Vector & ,char * );
    public void GetStepSoundVelocities(float * ,float * );
    public void SetStepSoundTime(enum stepsoundtimes_t ,bool );
    public void NotePredictionError(class Vector & );
    public void GetPredictionErrorSmoothingVector(class Vector & );
    public void ExitLadder();
    public struct surfacedata_t * GetLadderSurface(class Vector & );
    public struct surfacedata_t * GetSurfaceData();
    public void SetLadderNormal(class Vector );
    public class CHintSystem * Hints();
    public bool ShouldShowHints();
    public void HintMessage(char * );
    public bool HintMessage(int ,bool ,bool );
    public class IMaterial * GetHeadLabelMaterial();
    public int m_StuckLast;
    class NetworkVar_m_Local : public CPlayerLocalData
    {
        public class C_BasePlayer::NetworkVar_m_Local & operator=(class C_BasePlayer::NetworkVar_m_Local & );
        public void CopyFrom(class CPlayerLocalData & );
        public void NetworkStateChanged(void * );
        public void NetworkStateChanged();
        public void NetworkVar_m_Local(class C_BasePlayer::NetworkVar_m_Local & );
        public void NetworkVar_m_Local();
        public void ~NetworkVar_m_Local();
        public void * __vecDelDtor(unsigned int );
    };
    public int GetOffset_m_Local();
    public class C_BasePlayer::NetworkVar_m_Local m_Local;
    public class CPlayerState pl;
    public int m_iFOV;
    public int m_iFOVStart;
    public float m_flFOVTime;
    public int m_iDefaultFOV;
    public class CHandle<C_BaseEntity> m_hZoomOwner;
    public bool m_fOnTarget;
    public char m_szAnimExtension[32];
    public int m_afButtonLast;
    public int m_afButtonPressed;
    public int m_afButtonReleased;
    public int m_nButtons;
    public class CUserCmd * m_pCurrentCommand;
    public class CHandle<C_BaseEntity> m_hConstraintEntity;
    public class Vector m_vecConstraintCenter;
    public float m_flConstraintRadius;
    public float m_flConstraintWidth;
    public float m_flConstraintSpeedFactor;
    protected void CalcPlayerView(class Vector & ,class QAngle & ,float & );
    protected void CalcVehicleView(class IClientVehicle * ,class Vector & ,class QAngle & ,float & ,float & ,float & );
    protected void CalcObserverView(class Vector & ,class QAngle & ,float & );
    protected class Vector GetChaseCamViewOffset(class C_BaseEntity * );
    protected void CalcChaseCamView(class Vector & ,class QAngle & ,float & );
    protected void CalcInEyeCamView(class Vector & ,class QAngle & ,float & );
    protected void CalcDeathCamView(class Vector & ,class QAngle & ,float & );
    protected void CalcRoamingView(class Vector & ,class QAngle & ,float & );
    protected void CalcFreezeCamView(class Vector & ,class QAngle & ,float & );
    protected void DetermineVguiInputMode(class CUserCmd * );
    protected void SetLocalViewAngles(class QAngle & );
    protected struct surfacedata_t * GetGroundSurface();
    protected bool JustEnteredVehicle();
    protected int m_iObserverMode;
    protected class CHandle<C_BaseEntity> m_hObserverTarget;
    protected float m_flObserverChaseDistance;
    protected class Vector m_vecFreezeFrameStart;
    protected float m_flFreezeFrameStartTime;
    protected float m_flFreezeFrameDistance;
    protected bool m_bWasFreezeFraming;
    protected float m_flDeathTime;
    protected float m_flStepSoundTime;
    private class C_BasePlayer & operator=(class C_BasePlayer & );
    private class CHandle<C_BaseEntity> m_hVehicle;
    private class CHandle<C_BaseEntity> m_hOldVehicle;
    private class CHandle<C_BaseEntity> m_hUseEntity;
    private float m_flMaxspeed;
    private int m_iBonusProgress;
    private int m_iBonusChallenge;
    private class CInterpolatedVar<Vector> m_iv_vecViewOffset;
    private class Vector m_vecWaterJumpVel;
    private float m_flWaterJumpTime;
    private int m_nImpulse;
    private float m_flSwimSoundTime;
    private class Vector m_vecLadderNormal;
    private class QAngle m_vecOldViewAngles;
    private bool m_bWasFrozen;
    private int m_flPhysics;
    private int m_nTickBase;
    private int m_nFinalPredictedTick;
    private class CHandle<C_BaseEntity> m_pCurrentVguiScreen;
    private class CFlashlightEffect * m_pFlashlight;
    class NetworkVar_m_hLastWeapon
    {
        public void NetworkStateChanged(void * );
    };
    private class CNetworkVarBase<CHandle<C_BaseCombatWeapon>,C_BasePlayer::NetworkVar_m_hLastWeapon> m_hLastWeapon;
    private class CUtlVector<CHandle<C_BaseEntity>,CUtlMemory<CHandle<C_BaseEntity>,int> > m_SimulatedByThisPlayer;
    private class CHandle<C_BaseViewModel> m_hViewModel[2];
    private float m_flOldPlayerZ;
    private float m_flOldPlayerViewOffsetZ;
    private class Vector m_vecVehicleViewOrigin;
    private class QAngle m_vecVehicleViewAngles;
    private float m_flVehicleViewFOV;
    private int m_nVehicleViewSavedFrame;
    private int m_iOldAmmo[32];
    private class C_CommandContext m_CommandContext;
    private float m_flWaterSurfaceZ;
    private bool m_bResampleWaterSurface;
    private class TimedEvent m_tWaterParticleTimer;
    private class CSmartPtr<WaterDebrisEffect,CRefCountAccessor> m_pWaterEmitter;
    private bool m_bPlayerUnderwater;
    private float GetStepSize();
    private float m_flNextAvoidanceTime;
    private float m_flAvoidanceRight;
    private float m_flAvoidanceForward;
    private float m_flAvoidanceDotForward;
    private float m_flAvoidanceDotRight;
    protected bool IsDucked();
    protected bool IsDucking();
    protected float GetFallVelocity();
    protected void ForceSetupBonesAtTimeFakeInterpolation(struct matrix3x4_t * ,float );
    protected float m_flLaggedMovementValue;
    protected class Vector m_vecPredictionError;
    protected float m_flPredictionErrorTime;
    protected char m_szLastPlaceName[18];
    protected int m_surfaceProps;
    protected struct surfacedata_t * m_pSurfaceData;
    protected float m_surfaceFriction;
    protected char m_chTextureType;
    protected bool m_bSentFreezeFrame;
    protected float m_flFreezeZOffset;
    public char * GetLastKnownPlaceName();
    public float GetLaggedMovementValue();
    public bool ShouldGoSouth(class Vector ,class Vector );
    public void SetOldPlayerZ(float );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};