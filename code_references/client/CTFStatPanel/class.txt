class CTFStatPanel : public vgui::EditablePanel, public CHudElement
{
    public void AddToMap(char * ,void  ( * )(),int ,int ,char * ,int ,char * );
    public void ChainToMap();
    class CTFStatPanel_RegisterMap
    {
        public void CTFStatPanel_RegisterMap();
    };
    public class CTFStatPanel::CTFStatPanel_RegisterMap m_RegisterClass;
    public struct vgui::PanelMessageMap * GetMessageMap();
    public void AddToAnimationMap(char * ,char * ,char * ,char * ,bool ,void *  ( * )(class vgui::Panel * ));
    public void ChainToAnimationMap();
    class CTFStatPanel_Register
    {
        public void CTFStatPanel_Register();
    };
    public class CTFStatPanel::CTFStatPanel_Register m_RegisterAnimationClass;
    public struct PanelAnimationMap * GetAnimMap();
    public void KB_AddToMap(char * ,enum ButtonCode_t ,int ,void  ( * )(),char * ,char * ,bool );
    public void KB_ChainToMap();
    public void KB_AddBoundKey(char * ,int ,int );
    class CTFStatPanel_RegisterKBMap
    {
        public void CTFStatPanel_RegisterKBMap();
    };
    public class CTFStatPanel::CTFStatPanel_RegisterKBMap m_RegisterClassKB;
    public struct vgui::PanelKeyBindingMap * GetKBMap();
    public char * GetPanelClassName();
    public char * GetPanelBaseClassName();
	
    public void CTFStatPanel(class CTFStatPanel & );
    public void CTFStatPanel(char * );
    public void ~CTFStatPanel();
	
    public void Reset();
    public void Init();
    public void ApplySchemeSettings(class vgui::IScheme * );
    public void ApplySettings(class KeyValues * );
    public void FireGameEvent(class IGameEvent * );
    public void OnTick();
    public void Show();
    public void Hide();
    public bool ShouldDraw();
	
    public void ShowStatPanel(int ,int ,int ,enum TFStatType_t ,enum RecordBreakType_t );
    public void TestStatPanel(enum TFStatType_t );
	
    public void WriteStats();
    public bool ReadStats();
    public void ResetStats();
	
    private void GetStatValueAsString(int ,enum TFStatType_t ,char * ,int );
    private void UpdateStats(int ,struct RoundStats_t & ,bool );
    private void ResetDisplayedStat();
	
    private int m_iCurStatValue;
    private int m_iCurStatClassIndex;
    private int m_iCurStatTeam;
    private enum TFStatType_t m_statType;
    private enum RecordBreakType_t m_recordBreakType;
    private bool m_bDisplayAfterSpawn;
    private float m_flTimeHide;
	
    private class CUtlVector<ClassStats_t,CUtlMemory<ClassStats_t,int> > m_aClassStats;
    private bool m_bStatsChanged;
    private class CTFClassImage * m_pClassImage;
};