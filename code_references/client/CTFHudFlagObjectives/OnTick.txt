void __thiscall CTFHudFlagObjectives::OnTick(CTFHudFlagObjectives *this)
{
  int i; // ebx
  C_BaseEntity *BaseEntity; // eax
  C_CaptureFlag *v4; // eax
  C_CaptureFlag *v5; // esi
  unsigned int m_Index; // ecx
  CTFFlagStatus *m_pRedFlag; // eax
  CTFArrowPanel *m_pArrow; // eax
  unsigned int v9; // ecx
  CTFFlagStatus *m_pBlueFlag; // eax
  CTFArrowPanel *v11; // eax
  C_TFTeam *v12; // eax
  C_TFTeam *v13; // eax
  C_TFTeam *GlobalTFTeam; // eax
  void (__thiscall **p_SetDialogVariable)(vgui::EditablePanel *, const char *, int); // esi
  int v16; // eax
  C_TFTeam *v17; // eax
  void (__thiscall **v18)(vgui::EditablePanel *, const char *, int); // esi
  int v19; // eax

  for ( i = 0; i < g_Flags.m_Size; ++i )
  {
    BaseEntity = CClientEntityList::GetBaseEntity(
                   (CClientEntityList *)cl_entitylist.m_Index,
                   g_Flags.m_Memory.m_pMemory[i]);
    v4 = (C_CaptureFlag *)__RTDynamicCast(
                            BaseEntity,
                            0,
                            &C_BaseEntity `RTTI Type Descriptor',
                            &C_CaptureFlag `RTTI Type Descriptor',
                            0);
    v5 = v4;
    if ( v4 )
    {
      if ( !C_CaptureFlag::IsDisabled(v4) )
      {
        if ( this->m_pRedFlag && v5->GetTeamNumber(v5) == 2 )
        {
          m_Index = v5->GetRefEHandle(v5)->m_Index;
          m_pRedFlag = this->m_pRedFlag;
          m_pRedFlag->m_hEntity.m_Index = m_Index;
          m_pArrow = m_pRedFlag->m_pArrow;
          if ( m_pArrow )
            m_pArrow->m_hEntity.m_Index = m_Index;
        }
        else if ( this->m_pBlueFlag )
        {
          if ( v5->GetTeamNumber(v5) == 3 )
          {
            v9 = v5->GetRefEHandle(v5)->m_Index;
            m_pBlueFlag = this->m_pBlueFlag;
            m_pBlueFlag->m_hEntity.m_Index = v9;
            v11 = m_pBlueFlag->m_pArrow;
            if ( v11 )
              v11->m_hEntity.m_Index = v9;
          }
        }
      }
    }
    else
    {
      if ( g_Flags.m_Size - i - 1 > 0 )
        memmove(
          (unsigned __int8 *)&g_Flags.m_Memory.m_pMemory[i],
          (unsigned __int8 *)&g_Flags.m_Memory.m_pMemory[i + 1],
          4 * (g_Flags.m_Size - i - 1));
      --g_Flags.m_Size;
    }
  }
  if ( tf_flag_caps_per_round.m_pParent->m_nValue <= 0 )
  {
    GlobalTFTeam = GetGlobalTFTeam(3);
    if ( GlobalTFTeam )
    {
      p_SetDialogVariable = &this->SetDialogVariable;
      v16 = GlobalTFTeam->Get_Score(GlobalTFTeam);
      (*p_SetDialogVariable)(this, "bluescore", v16);
    }
    v17 = GetGlobalTFTeam(2);
    if ( v17 )
    {
      v18 = &this->SetDialogVariable;
      v19 = v17->Get_Score(v17);
      (*v18)(this, "redscore", v19);
    }
    if ( this->m_pPlayingTo && this->m_pPlayingToBG )
    {
      if ( this->m_pPlayingTo->IsVisible(this->m_pPlayingTo) )
        this->m_pPlayingTo->SetVisible(this->m_pPlayingTo, 0);
      if ( this->m_pPlayingToBG->IsVisible(this->m_pPlayingToBG) )
        this->m_pPlayingToBG->SetVisible(this->m_pPlayingToBG, 0);
    }
  }
  else
  {
    v12 = GetGlobalTFTeam(3);
    if ( v12 )
      this->SetDialogVariable(this, "bluescore", v12->m_nFlagCaptures);
    v13 = GetGlobalTFTeam(2);
    if ( v13 )
      this->SetDialogVariable(this, "redscore", v13->m_nFlagCaptures);
    if ( this->m_pPlayingTo && this->m_pPlayingToBG )
    {
      if ( !this->m_pPlayingTo->IsVisible(this->m_pPlayingTo) )
        this->m_pPlayingTo->SetVisible(this->m_pPlayingTo, 1);
      if ( !this->m_pPlayingToBG->IsVisible(this->m_pPlayingToBG) )
        this->m_pPlayingToBG->SetVisible(this->m_pPlayingToBG, 1);
    }
    this->SetDialogVariable(this, "rounds", tf_flag_caps_per_round.m_pParent->m_nValue);
  }
}