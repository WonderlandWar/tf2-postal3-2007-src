class vgui::RotatingProgressBar : public vgui::ProgressBar
{
    public void AddToMap(char * ,void  ( * )(),int ,int ,char * ,int ,char * );
    public void ChainToMap();
    class RotatingProgressBar_RegisterMap
    {
        public void RotatingProgressBar_RegisterMap();
    };
    public class vgui::RotatingProgressBar::RotatingProgressBar_RegisterMap m_RegisterClass;
    public struct vgui::PanelMessageMap * GetMessageMap();
    public void AddToAnimationMap(char * ,char * ,char * ,char * ,bool ,void *  ( * )(class vgui::Panel * ));
    public void ChainToAnimationMap();
    class RotatingProgressBar_Register
    {
        public void RotatingProgressBar_Register();
    };
    public class vgui::RotatingProgressBar::RotatingProgressBar_Register m_RegisterAnimationClass;
    public struct PanelAnimationMap * GetAnimMap();
    public void KB_AddToMap(char * ,enum ButtonCode_t ,int ,void  ( * )(),char * ,char * ,bool );
    public void KB_ChainToMap();
    public void KB_AddBoundKey(char * ,int ,int );
    class RotatingProgressBar_RegisterKBMap
    {
        public void RotatingProgressBar_RegisterKBMap();
    };
    public class vgui::RotatingProgressBar::RotatingProgressBar_RegisterKBMap m_RegisterClassKB;
    public struct vgui::PanelKeyBindingMap * GetKBMap();
    public char * GetPanelClassName();
    public char * GetPanelBaseClassName();
	
    public void RotatingProgressBar(class vgui::RotatingProgressBar & );
    public void RotatingProgressBar(class vgui::Panel * ,char * );
    public void ~RotatingProgressBar();
	
    public void ApplySettings(class KeyValues * );
    public void ApplySchemeSettings(class vgui::IScheme * );
	
    public void SetImage(char * );
	
    protected void Paint();
    protected void PaintBackground();
    protected void OnTick();
	
    private int m_nTextureId;
    private char * m_pszImageName;
	
    private float m_flStartRadians;
    private float m_flEndRadians;
	
    private float m_flLastAngle;
	
    private float m_flTickDelay;
    private float m_flApproachSpeed;
	
    private float m_flRotOriginX;
    private float m_flRotOriginY;
	
    private float m_flRotatingX;
    private float m_flRotatingY;
    private float m_flRotatingWide;
    private float m_flRotatingTall;
};