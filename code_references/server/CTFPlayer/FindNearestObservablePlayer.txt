CTFPlayer *__thiscall CTFPlayer::FindNearestObservablePlayer(CTFPlayer *this, Vector vecOrigin, float flMaxDist)
{
  CTeam *Team; // ebp
  char v5; // bl
  CBaseEntity *v6; // esi
  double v7; // st5
  double v8; // st4
  double v9; // st6
  double v10; // st5
  double v11; // st7
  CTFPlayer *pReturnPlayer; // [esp+10h] [ebp-8h]
  CBaseEntity *v14; // [esp+14h] [ebp-4h]
  float flCurDistSqr; // [esp+28h] [ebp+10h]

  Team = CBaseEntity::GetTeam(this);
  flCurDistSqr = flMaxDist * flMaxDist;
  v14 = 0;
  v5 = 0;
  pReturnPlayer = 0;
  if ( Team->GetNumPlayers(Team) <= 0 )
    return 0;
  do
  {
    v6 = Team->GetPlayer(Team, (int)pReturnPlayer);
    if ( v6 && v6->IsPlayer(v6) && this->IsValidObserverTarget(this, v6) )
    {
      if ( (v6->m_iEFlags & 0x800) != 0 )
        CBaseEntity::CalcAbsolutePosition(v6);
      v7 = v6->m_vecAbsOrigin.z - vecOrigin.z;
      v8 = v6->m_vecAbsOrigin.y - vecOrigin.y;
      v9 = v8 * v8 + v7 * v7;
      v10 = v6->m_vecAbsOrigin.x - vecOrigin.x;
      v11 = v10 * v10 + v9;
      if ( flCurDistSqr <= v11 )
      {
        if ( !v5
          && v6 != (CBaseEntity *)-4340
          && v6[5].m_aThinkFunctions.m_Memory.m_pMemory == (thinkfunc_t *)this->m_PlayerClass.m_iClass.m_Value )
        {
          flCurDistSqr = v11;
          v14 = v6;
          v5 = 1;
        }
      }
      else if ( !v5
             || v6 != (CBaseEntity *)-4340
             && v6[5].m_aThinkFunctions.m_Memory.m_pMemory == (thinkfunc_t *)this->m_PlayerClass.m_iClass.m_Value )
      {
        flCurDistSqr = v11;
        v14 = v6;
        if ( v6 != (CBaseEntity *)-4340
          && v6[5].m_aThinkFunctions.m_Memory.m_pMemory == (thinkfunc_t *)this->m_PlayerClass.m_iClass.m_Value )
        {
          v5 = 1;
        }
      }
    }
    pReturnPlayer = (CTFPlayer *)((char *)pReturnPlayer + 1);
  }
  while ( (int)pReturnPlayer < Team->GetNumPlayers(Team) );
  return (CTFPlayer *)v14;
}