bool __thiscall CTFPlayer::ClientCommand(CTFPlayer *this, float args)
{
  const CCommand *v2; // edi
  const char *v4; // esi
  const char *v6; // eax
  int v7; // esi
  const char *v8; // edi
  int v9; // eax
  int m_Value; // eax
  int TeamNumber; // eax
  const char *v12; // eax
  const char *v13; // edi
  const char *v14; // eax
  const char *v15; // edi
  CTFWeaponBase *ActiveTFWeapon; // eax
  int v17; // eax
  int v18; // [esp-4h] [ebp-10h]

  v2 = (const CCommand *)LODWORD(args);
  v4 = locale;
  if ( (int)*(_DWORD *)LODWORD(args) > 0 )
    v4 = *(const char **)(LODWORD(args) + 1032);
  if ( v4 == "jointeam" || !_stricmp(v4, "jointeam") )
  {
    if ( v2->m_nArgc >= 2 )
    {
      if ( v2->m_nArgc <= 1 )
      {
        CTFPlayer::HandleCommand_JoinTeam(this, locale);
        return 1;
      }
      CTFPlayer::HandleCommand_JoinTeam(this, v2->m_ppArgv[1]);
    }
    return 1;
  }
  if ( v4 != "joinclass" && _stricmp(v4, "joinclass") )
  {
    if ( v4 == "disguise" || !_stricmp(v4, "disguise") )
    {
      if ( v2->m_nArgc >= 3 && this->m_PlayerClass.m_iClass.m_Value == 8 && CTFPlayer::CanDisguise(this) )
      {
        v6 = locale;
        if ( v2->m_nArgc > 1 )
          v6 = v2->m_ppArgv[1];
        v7 = atoi(v6);
        if ( v2->m_nArgc > 2 )
          v8 = v2->m_ppArgv[2];
        else
          v8 = locale;
        v9 = atoi(v8);
        CTFPlayerShared::Disguise(&this->m_Shared, 3 - (v9 != 1), v7);
      }
      return 1;
    }
    if ( v4 == "lastdisguise" || !_stricmp(v4, "lastdisguise") )
    {
      if ( this->m_PlayerClass.m_iClass.m_Value == 8 && CTFPlayer::CanDisguise(this) )
      {
        m_Value = this->m_Shared.m_nDesiredDisguiseClass.m_Value;
        if ( !m_Value )
        {
          do
          {
            do
              m_Value = random->RandomInt(random, 1, 9);
            while ( m_Value == 1 );
          }
          while ( m_Value == 8 );
        }
        v18 = m_Value;
        TeamNumber = CBaseEntity::GetTeamNumber(this);
        CTFPlayerShared::Disguise(&this->m_Shared, (TeamNumber != 3) + 2, v18);
      }
      return 1;
    }
    if ( FStrEq(v4, "burn") )
    {
      CTFPlayerShared::Burn(&this->m_Shared, this);
      return 1;
    }
    if ( FStrEq(v4, "detsentry") )
    {
      if ( CTFPlayer::CanAttack(this) )
        CTFPlayer::DetonateOwnedObjectsOfType(this, 3);
      return 1;
    }
    if ( FStrEq(v4, "detdispenser") )
    {
      if ( CTFPlayer::CanAttack(this) )
        CTFPlayer::DetonateOwnedObjectsOfType(this, 0);
      return 1;
    }
    if ( FStrEq(v4, "dettele_enter") )
    {
      if ( CTFPlayer::CanAttack(this) )
        CTFPlayer::DetonateOwnedObjectsOfType(this, 1);
      return 1;
    }
    if ( FStrEq(v4, "dettele_exit") )
    {
      if ( CTFPlayer::CanAttack(this) )
        CTFPlayer::DetonateOwnedObjectsOfType(this, 2);
      return 1;
    }
    if ( FStrEq(v4, "mp_playgesture") )
    {
      if ( v2->m_nArgc == 1 )
      {
        _Warning("mp_playgesture: Gesture activity or sequence must be specified!\n");
        return 1;
      }
      if ( sv_cheats->m_pParent->m_nValue )
      {
        v12 = locale;
        if ( v2->m_nArgc > 1 )
          v12 = v2->m_ppArgv[1];
        if ( !CTFPlayer::PlayGesture(this, v12) )
        {
          if ( v2->m_nArgc > 1 )
            v13 = v2->m_ppArgv[1];
          else
            v13 = locale;
          _Warning("mp_playgesture: unknown sequence or activity name \"%s\"\n", v13);
          return 1;
        }
      }
    }
    else
    {
      if ( !FStrEq(v4, "mp_playanimation") )
      {
        if ( FStrEq(v4, "menuopen") )
        {
          this->m_bIsClassMenuOpen = 1;
          return 1;
        }
        else if ( FStrEq(v4, "menuclosed") )
        {
          this->m_bIsClassMenuOpen = 0;
          return 1;
        }
        else if ( FStrEq(v4, "pda_click") )
        {
          ActiveTFWeapon = CTFPlayer::GetActiveTFWeapon(this);
          if ( __RTDynamicCast(
                 ActiveTFWeapon,
                 0,
                 &CTFWeaponBase `RTTI Type Descriptor',
                 &CTFWeaponPDA `RTTI Type Descriptor',
                 0)
            && !CTFPlayerShared::InCond(&this->m_Shared, 7) )
          {
            CTFPlayer::DoAnimationEvent(this, PLAYERANIMEVENT_ATTACK_PRIMARY, 0);
          }
          return 1;
        }
        else if ( FStrEq(v4, "taunt") )
        {
          CTFPlayer::Taunt(this);
          return 1;
        }
        else if ( FStrEq(v4, "build") )
        {
          if ( v2->m_nArgc == 2 )
          {
            v17 = atoi(v2->m_ppArgv[1]);
            CTFPlayer::StartBuildingObjectOfType(this, v17);
          }
          return 1;
        }
        else if ( FStrEq(v4, "extendfreeze") )
        {
          args = 2.0;
          CNetworkVarBase<float,CBasePlayer::NetworkVar_m_flDeathTime>::operator+=<float>(&this->m_flDeathTime, &args);
          return 1;
        }
        else
        {
          return CBaseMultiplayerPlayer::ClientCommand(this, v2);
        }
      }
      if ( v2->m_nArgc == 1 )
      {
        _Warning("mp_playanimation: Activity or sequence must be specified!\n");
        return 1;
      }
      if ( sv_cheats->m_pParent->m_nValue )
      {
        v14 = locale;
        if ( v2->m_nArgc > 1 )
          v14 = v2->m_ppArgv[1];
        if ( !CTFPlayer::PlaySpecificSequence(this, v14) )
        {
          if ( v2->m_nArgc > 1 )
            v15 = v2->m_ppArgv[1];
          else
            v15 = locale;
          _Warning("mp_playanimation: Unknown sequence or activity name \"%s\"\n", v15);
          return 1;
        }
      }
    }
    return 1;
  }
  if ( v2->m_nArgc >= 2 )
  {
    if ( v2->m_nArgc <= 1 )
    {
      CTFPlayer::HandleCommand_JoinClass(this, locale);
      return 1;
    }
    CTFPlayer::HandleCommand_JoinClass(this, v2->m_ppArgv[1]);
  }
  return 1;
}