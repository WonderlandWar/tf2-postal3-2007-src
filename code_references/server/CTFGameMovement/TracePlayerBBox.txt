void __thiscall CTFGameMovement::TracePlayerBBox(
        CTFGameMovement *this,
        const Vector *start,
        const Vector *end,
        unsigned int fMask,
        int collisionGroup,
        CGameTrace *pm)
{
  const Vector *v7; // eax
  unsigned int m_Index; // eax
  unsigned int v9; // edx
  IHandleEntity *m_pEntity; // eax
  const Vector *v11; // [esp-4h] [ebp-48h]
  CTraceFilterObject traceFilter; // [esp+0h] [ebp-44h] BYREF
  Ray_t ray; // [esp+Ch] [ebp-38h] BYREF

  if ( tf_solidobjects.m_pParent->m_nValue )
  {
    v11 = this->GetPlayerMaxs(this);
    v7 = this->GetPlayerMins(this);
    Ray_t::Init((Ray_t *)&ray.m_Start.y, start, end, v7, v11);
    m_Index = this->mv->m_nPlayerHandle.m_Index;
    if ( m_Index == -1
      || (v9 = this->mv->m_nPlayerHandle.m_Index & 0xFFF,
          g_pEntityList->m_EntPtrArray[v9].m_SerialNumber != m_Index >> 12) )
    {
      m_pEntity = 0;
    }
    else
    {
      m_pEntity = g_pEntityList->m_EntPtrArray[v9].m_pEntity;
    }
    CTraceFilterSimple::CTraceFilterSimple((CTraceFilterSimple *)&traceFilter.m_pPassEnt, m_pEntity, collisionGroup);
    traceFilter.m_pPassEnt = (const IHandleEntity *)&CTraceFilterObject::`vftable';
    enginetrace->TraceRay(enginetrace, (Ray_t *)&ray.m_Start.y, fMask, (ITraceFilter *)&traceFilter.m_pPassEnt, pm);
  }
  else
  {
    CGameMovement::TracePlayerBBox(this, start, end, fMask, collisionGroup, pm);
  }
}