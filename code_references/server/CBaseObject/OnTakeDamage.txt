int __thiscall CBaseObject::OnTakeDamage(CBaseObject *this, int info)
{
  CTakeDamageInfo *v4; // ebp
  CBaseEntity *Attacker; // eax
  bool (__thiscall *IsAnUpgrade)(CBaseObject *); // eax
  int (__thiscall *GetNumObjectsOnMe)(IHasBuildPoints *); // eax
  int v8; // ebx
  int v9; // edi
  CBaseObject *v10; // eax
  double v11; // st7
  double m_flHealth; // st7
  bool v13; // al
  unsigned int m_Index; // eax
  int v15; // edx
  CBaseEntity *m_pEntity; // ecx
  unsigned int v17; // eax
  CBaseEntity *v18; // eax
  unsigned int v19; // eax
  CBaseEntity *v20; // ebx
  void (__thiscall **p_DispatchResponse)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // edi
  const char *ResponseRulesModifier; // eax
  unsigned int v23; // eax
  const char *v24; // edx
  unsigned int v25; // eax
  int v26; // edx
  IHandleEntity *v27; // ecx
  int m_Value; // eax
  int v29; // ecx
  const char *pszValue; // esi
  float flHealth; // [esp+24h] [ebp-18h]
  float flDamageLeftOver; // [esp+38h] [ebp-4h] BYREF

  if ( !this->IsAlive(this) )
    return (int)*(float *)(info + 44);
  if ( !this->m_takedamage.m_Value || this->m_bPlacing.m_Value )
    return 0;
  v4 = (CTakeDamageInfo *)info;
  if ( CTakeDamageInfo::GetAttacker((CTakeDamageInfo *)info) )
  {
    Attacker = CTakeDamageInfo::GetAttacker(v4);
    if ( CBaseEntity::InSameTeam(this, Attacker) )
      return 0;
  }
  IsAnUpgrade = this->IsAnUpgrade;
  flDamageLeftOver = v4->m_flDamage;
  if ( !IsAnUpgrade(this) && CBaseObject::GetParentObject(this) )
    flDamageLeftOver = obj_child_damage_factor.m_pParent->m_fValue * flDamageLeftOver;
  if ( 0.0 != obj_damage_factor.m_pParent->m_fValue )
    flDamageLeftOver = flDamageLeftOver * obj_damage_factor.m_pParent->m_fValue;
  GetNumObjectsOnMe = this->GetNumObjectsOnMe;
  LOBYTE(info) = 0;
  v8 = GetNumObjectsOnMe(&this->IHasBuildPoints);
  v9 = 0;
  if ( v8 <= 0 )
  {
LABEL_18:
    v11 = flDamageLeftOver;
    goto LABEL_24;
  }
  while ( 1 )
  {
    v10 = this->GetBuildPointObject(this, v9);
    if ( v10 )
    {
      if ( !v10->IsHostileUpgrade(v10) )
        break;
    }
    if ( ++v9 >= v8 )
      goto LABEL_18;
  }
  m_flHealth = this->m_flHealth;
  LOBYTE(info) = 1;
  if ( m_flHealth - flDamageLeftOver >= 1.0 )
  {
    v11 = flDamageLeftOver;
    goto LABEL_24;
  }
  flDamageLeftOver = flDamageLeftOver - this->m_flHealth;
  CBaseObject::SetHealth(this, 1.0);
  if ( 0.0 == flDamageLeftOver )
  {
LABEL_28:
    m_Index = v4->m_hAttacker.m_Index;
    if ( m_Index == -1
      || (v15 = v4->m_hAttacker.m_Index & 0xFFF, g_pEntityList->m_EntPtrArray[v15].m_SerialNumber != m_Index >> 12) )
    {
      m_pEntity = 0;
    }
    else
    {
      m_pEntity = (CBaseEntity *)g_pEntityList->m_EntPtrArray[v15].m_pEntity;
    }
    COutputEvent::FireOutput(&this->m_OnDamaged, m_pEntity, this, 0.0);
    if ( this->m_iHealth.m_Value <= 0 )
    {
      info = 2;
      CNetworkVarBase<char,CBaseEntity::NetworkVar_m_lifeState>::operator=<int>(&this->m_lifeState, &info);
      v17 = v4->m_hAttacker.m_Index;
      if ( v17 == -1 || g_pEntityList->m_EntPtrArray[v4->m_hAttacker.m_Index & 0xFFF].m_SerialNumber != v17 >> 12 )
        v18 = 0;
      else
        v18 = (CBaseEntity *)g_pEntityList->m_EntPtrArray[v4->m_hAttacker.m_Index & 0xFFF].m_pEntity;
      COutputEvent::FireOutput(&this->m_OnDestroyed, v18, this, 0.0);
      this->Killed(this, v4);
      v19 = this->m_hBuilder.m_Value.m_Index;
      if ( v19 != -1
        && g_pEntityList->m_EntPtrArray[this->m_hBuilder.m_Value.m_Index & 0xFFF].m_SerialNumber == v19 >> 12
        && g_pEntityList->m_EntPtrArray[this->m_hBuilder.m_Value.m_Index & 0xFFF].m_pEntity )
      {
        v20 = CHandle<CBaseAnimating>::operator CBaseAnimating *((CHandle<CBaseEntity> *)&this->m_hBuilder);
        p_DispatchResponse = (void (__thiscall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))&v20->__vftable[2].DispatchResponse;
        ResponseRulesModifier = CBaseObject::GetResponseRulesModifier(this);
        (*p_DispatchResponse)(v20, 46, ResponseRulesModifier, 0, 0, 0);
      }
    }
    v23 = v4->m_hInflictor.m_Index;
    v24 = "unknown";
    if ( v23 != -1
      && g_pEntityList->m_EntPtrArray[v4->m_hInflictor.m_Index & 0xFFF].m_SerialNumber == v23 >> 12
      && g_pEntityList->m_EntPtrArray[v4->m_hInflictor.m_Index & 0xFFF].m_pEntity )
    {
      v25 = v4->m_hInflictor.m_Index;
      if ( v25 == -1
        || (v26 = v4->m_hInflictor.m_Index & 0xFFF, g_pEntityList->m_EntPtrArray[v26].m_SerialNumber != v25 >> 12) )
      {
        v27 = 0;
      }
      else
      {
        v27 = g_pEntityList->m_EntPtrArray[v26].m_pEntity;
      }
      v24 = (const char *)v27[3].__vftable;
      if ( !v24 )
        v24 = locale;
    }
    m_Value = this->m_iMaxHealth.m_Value;
    v29 = this->m_iHealth.m_Value;
    pszValue = this->m_iClassname.pszValue;
    if ( !pszValue )
      pszValue = locale;
    ReportDamage(v24, pszValue, flDamageLeftOver, v29, m_Value);
    return (int)flDamageLeftOver;
  }
  v13 = CBaseObject::PassDamageOntoChildren(this, v4, &flDamageLeftOver);
  v11 = flDamageLeftOver;
  if ( !v13 )
  {
LABEL_24:
    if ( 0.0 != v11 && (!(_BYTE)info || this->m_flHealth - v11 >= 1.0) )
    {
      flHealth = this->m_flHealth - v11;
      CBaseObject::SetHealth(this, flHealth);
    }
    goto LABEL_28;
  }
  return (int)v11;
}