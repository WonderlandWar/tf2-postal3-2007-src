BOOL __thiscall CGameMovement::CheckWater(CGameMovement *this)
{
  Vector *p_m_vecAbsOrigin; // edi
  const Vector *v3; // eax
  const Vector *(__thiscall *GetPlayerMins)(CGameMovement *); // edx
  double v5; // st7
  float *p_y; // edi
  const Vector *v7; // eax
  const Vector *(__thiscall *v8)(CGameMovement *); // edx
  double v9; // st7
  float *p_z; // edi
  double v11; // st7
  CNetworkVarBase<unsigned char,CBaseEntity::NetworkVar_m_nWaterLevel> *p_m_nWaterLevel; // edi
  int v13; // ecx
  int PointContentsCached; // eax
  float *v15; // edi
  int v16; // edi
  float *v17; // edi
  double v18; // st6
  double v19; // st7
  double v20; // st5
  double v21; // st4
  double v22; // rtt
  double v23; // st5
  double v24; // st7
  CBasePlayer *player; // eax
  CBasePlayer *v26; // ecx
  float scale; // [esp+14h] [ebp-48h]
  Vector v; // [esp+28h] [ebp-34h] BYREF
  Vector point; // [esp+34h] [ebp-28h] BYREF
  Vector temp; // [esp+40h] [ebp-1Ch] BYREF
  float v32; // [esp+4Ch] [ebp-10h]
  Vector val; // [esp+50h] [ebp-Ch] BYREF

  p_m_vecAbsOrigin = &this->mv->m_vecAbsOrigin;
  v.x = this->GetPlayerMins(this)->x;
  v3 = this->GetPlayerMaxs(this);
  GetPlayerMins = this->GetPlayerMins;
  v5 = (v3->x + v.x) * 0.5 + p_m_vecAbsOrigin->x;
  p_y = &this->mv->m_vecAbsOrigin.y;
  point.y = v5;
  v.x = GetPlayerMins(this)->y;
  v7 = this->GetPlayerMaxs(this);
  v8 = this->GetPlayerMins;
  v9 = (v7->y + v.x) * 0.5 + *p_y;
  p_z = &this->mv->m_vecAbsOrigin.z;
  point.z = v9;
  v11 = v8(this)->z + *p_z;
  p_m_nWaterLevel = &this->player->m_nWaterLevel;
  temp.x = v11 + 1.0;
  if ( p_m_nWaterLevel->m_Value )
  {
    v13 = 1;
    if ( !p_m_nWaterLevel->m_Value )
      v13 = -1;
  }
  else
  {
    v13 = 0;
  }
  if ( v13 )
  {
    (*(void (__thiscall **)(CNetworkVarBase<unsigned char,CBaseEntity::NetworkVar_m_nWaterLevel> *, CNetworkVarBase<unsigned char,CBaseEntity::NetworkVar_m_nWaterLevel> *))(*(_DWORD *)&p_m_nWaterLevel[-535].m_Value + 640))(
      p_m_nWaterLevel - 535,
      p_m_nWaterLevel);
    p_m_nWaterLevel->m_Value = 0;
  }
  CBaseEntity::SetWaterType(this->player, 0);
  PointContentsCached = CGameMovement::GetPointContentsCached(this, (Vector *)&point.y);
  if ( (PointContentsCached & 0x4030) != 0 )
  {
    CBaseEntity::SetWaterType(this->player, PointContentsCached);
    CBaseEntity::SetWaterLevel(this->player, 1);
    v15 = &this->mv->m_vecAbsOrigin.z;
    v.x = this->GetPlayerMins(this)->z;
    temp.x = (this->GetPlayerMaxs(this)->z + v.x) * 0.5 + *v15;
    v16 = enginetrace->GetPointContents(enginetrace, (Vector *)&point.y, 0);
    if ( (v16 & 0x4030) != 0 )
    {
      CBaseEntity::SetWaterLevel(this->player, 2);
      v17 = &this->mv->m_vecAbsOrigin.z;
      temp.x = this->player->GetViewOffset(this->player)->z + *v17;
      v16 = enginetrace->GetPointContents(enginetrace, (Vector *)&point.y, 0);
      if ( (v16 & 0x4030) != 0 )
        CBaseEntity::SetWaterLevel(this->player, 3);
    }
    if ( (v16 & 0xFC0000) != 0 )
    {
      v18 = 0.0;
      point.x = 0.0;
      v.z = 0.0;
      v19 = 0.0;
      v.y = 0.0;
      if ( (v16 & 0x40000) != 0 )
      {
        v20 = 1.0;
        v21 = 1.0;
        v.y = 1.0;
      }
      else
      {
        v21 = 0.0;
        v20 = 1.0;
      }
      if ( (v16 & 0x80000) != 0 )
      {
        v.z = v20;
        v19 = v20;
      }
      if ( (v16 & 0x100000) != 0 )
        v.y = v21 - v20;
      if ( (v16 & 0x200000) != 0 )
      {
        v22 = v20;
        v23 = v19 - v20;
        v24 = v22;
        v.z = v23;
      }
      else
      {
        v24 = v20;
      }
      if ( (v16 & 0x400000) != 0 )
      {
        v18 = v24;
        point.x = v24;
      }
      if ( (v16 & 0x800000) != 0 )
        point.x = v18 - v24;
      player = this->player;
      scale = (double)player->m_nWaterLevel.m_Value * 50.0;
      VectorMA(&player->m_vecBaseVelocity.m_Value, scale, (Vector *)&v.y, (Vector *)&temp.y);
      val.z = v32;
      v26 = this->player;
      val.x = temp.y;
      val.y = temp.z;
      CNetworkVarBase<Vector,CBaseEntity::NetworkVar_m_vecBaseVelocity>::Set(&v26->m_vecBaseVelocity, &val);
    }
  }
  if ( !this->m_nOldWaterLevel && this->player->m_nWaterLevel.m_Value )
    this->m_flWaterEntryTime = gpGlobals->curtime;
  return this->player->m_nWaterLevel.m_Value > 1u;
}