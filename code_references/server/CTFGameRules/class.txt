class CTFGameRules : public CTeamplayRoundBasedRules, public CGameEventListener
{
    public void CTFGameRules(class CTFGameRules & );
    public void CTFGameRules();
    public bool Damage_IsTimeBased(int );
    public bool Damage_ShowOnHUD(int );
    public bool Damage_ShouldNotBleed(int );
    public int Damage_GetTimeBased();
    public int Damage_GetShowOnHud();
    public int Damage_GetShouldNotBleed();
    public int GetFarthestOwnedControlPoint(int ,bool );
    public bool TeamMayCapturePoint(int ,int );
    public bool PlayerMayCapturePoint(class CBasePlayer * ,int ,char * ,int );
    public bool PlayerMayBlockPoint(class CBasePlayer * ,int ,char * ,int );
    public int CalcPlayerScore(struct RoundStats_t * );
    public bool IsBirthday();
    public bool RoundCleanupShouldIgnore(class CBaseEntity * );
    public bool ShouldCreateEntity(char * );
    public void SetupOnRoundStart();
    public void SetupOnRoundRunning();
    public void PreviousRoundEnd();
    public void SendTeamScoresEvent();
    public void SendWinPanelInfo();
    public void SetupSpawnPointsForRound();
    public void SetupOnStalemateStart();
    public void SetupOnStalemateEnd();
    public void RecalculateControlPointState();
    public void HandleSwitchTeams();
    public void HandleScrambleTeams();
    public bool CanChangeClassInStalemate();
    public void SetRoundOverlayDetails();
    public void ShowRoundInfoPanel(class CTFPlayer * );
    public bool TimerMayExpire();
    public void Activate();
    public bool AllowDamage(class CBaseEntity * ,class CTakeDamageInfo & );
    public void SetTeamGoalString(int ,char * );
    public void InitCustomResponseRulesDicts();
    protected void InitTeams();
    protected void RoundRespawn();
    protected void InternalHandleTeamWin(int );
    protected int PlayerRoundScoreSortFunc(struct PlayerRoundScore_t * ,struct PlayerRoundScore_t * );
    public int GetCaptureValueForPlayer(class CBasePlayer * );
    public bool ShouldCollide(int ,int );
    public bool IsGameUnderTimeLimit();
    public int GetTimeLeft();
    public class CViewVectors * GetViewVectors();
    public void FireGameEvent(class IGameEvent * );
    public char * GetGameTypeName();
    public int GetGameType();
    public bool FlagsMayBeCapped();
    public void RunPlayerConditionThink();
    public char * GetTeamGoalString(int );
    public void ~CTFGameRules();
    public bool ClientCommand(class CBaseEntity * ,class CCommand & );
    public void Think();
    public bool CheckTimeLimit();
    public bool CheckMaxRounds();
    public bool CheckWinLimit();
    public bool CheckCapsPerRound();
    public void CheckRespawnWaves();
    public bool FPlayerCanTakeDamage(class CBasePlayer * ,class CBaseEntity * );
    public class CBaseEntity * GetPlayerSpawnSpot(class CBasePlayer * );
    public bool IsSpawnPointValid(class CBaseEntity * ,class CBasePlayer * );
    public float FlItemRespawnTime(class CItem * );
    public class Vector VecItemRespawnSpot(class CItem * );
    public class QAngle VecItemRespawnAngles(class CItem * );
    public char * GetChatFormat(bool ,class CBasePlayer * );
    public void ClientSettingsChanged(class CBasePlayer * );
    public void ChangePlayerName(class CTFPlayer * ,char * );
    public struct VoiceCommandMenuItem_t * VoiceCommand(class CBaseMultiplayerPlayer * ,int ,int );
    public bool IsInPreMatch();
    public float GetPreMatchEndTime();
    public void GoToIntermission();
    public bool CanHaveAmmo(class CBaseCombatCharacter * ,int );
    public char * GetGameDescription();
    public void CreateStandardEntities();
    public void PlayerKilled(class CBasePlayer * ,class CTakeDamageInfo & );
    public void DeathNotice(class CBasePlayer * ,class CTakeDamageInfo & );
    public class CBasePlayer * GetDeathScorer(class CBaseEntity * ,class CBaseEntity * ,class CBaseEntity * );
    public char * GetKillingWeaponName(class CBaseEntity * ,class CBasePlayer * );
    public class CBasePlayer * GetAssister(class CBasePlayer * ,class CBasePlayer * ,class CBaseEntity * );
    public class CTFPlayer * GetRecentDamager(class CTFPlayer * ,int ,float );
    public void ClientDisconnected(struct edict_t * );
    public void RadiusDamage(class CTakeDamageInfo & ,class Vector & ,float ,int ,class CBaseEntity * );
    public float FlPlayerFallDamage(class CBasePlayer * );
    public bool FlPlayerFallDeathDoesScreenFade(class CBasePlayer * );
    public bool UseSuicidePenalty();
    public int GetPreviousRoundWinners();
    public void SendHudNotification(class IRecipientFilter & ,char * ,char * ,int );
    public void SendHudNotification(class IRecipientFilter & ,enum HudNotification_t );
    private int DefaultFOV();
    private void SetCurrentRoundName(char * );
    private void SetCurrentRoundImageRed(char * );
    private void SetCurrentRoundImageBlue(char * );
    private void SetCurrentRoundStateImage(char * );
    private char * GetCurrentRoundName();
    private char * GetCurrentRoundImageRed();
    private char * GetCurrentRoundImageBlue();
    private char * GetCurrentRoundStateImage();
    private class Vector2D m_vecPlayerPositions[32];
    private class CUtlVector<CHandle<CHealthKit>,CUtlMemory<CHandle<CHealthKit>,int> > m_hDisabledHealthKits;
    private char m_szCurrentRoundName[32];
    private char m_szCurrentRoundImageRed[64];
    private char m_szCurrentRoundImageBlue[64];
    private char m_szCurrentRoundStateImage[64];
    private char m_szMostRecentCappers[33];
    class NetworkVar_m_nGameType
    {
        public void NetworkStateChanged(void * );
    };
    private class CNetworkVarBase<int,CTFGameRules::NetworkVar_m_nGameType> m_nGameType;
    class NetworkVar_m_pszTeamGoalStringRed
    {
        public char * operator const char *();
        public char * Get();
        public char * GetForModify();
        protected void NetworkStateChanged();
        private char m_Value[256];
    };
    private class CTFGameRules::NetworkVar_m_pszTeamGoalStringRed m_pszTeamGoalStringRed;
    class NetworkVar_m_pszTeamGoalStringBlue
    {
        public char * operator const char *();
        public char * Get();
        public char * GetForModify();
        protected void NetworkStateChanged();
        private char m_Value[256];
    };
    private class CTFGameRules::NetworkVar_m_pszTeamGoalStringBlue m_pszTeamGoalStringBlue;
    public bool m_bControlSpawnsPerTeam[32][8];
    public int m_iPreviousRoundWinners;
    public int m_iBirthdayMode;
    public class CTFGameRules & operator=(class CTFGameRules & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};