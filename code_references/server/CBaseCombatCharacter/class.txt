class CBaseCombatCharacter : public CBaseFlex
{
    public void CBaseCombatCharacter(class CBaseCombatCharacter & );
    public void CBaseCombatCharacter();
    public void ~CBaseCombatCharacter();
    public class ServerClass * GetServerClass();
    public class SendTable * m_pClassSendTable;
    public int YouForgotToImplementOrDeclareServerClass();
    public struct datamap_t m_DataMap;
    public struct datamap_t * GetBaseMap();
    public struct datamap_t * GetDataDescMap();
    public void Spawn();
    public void Precache();
    public int Restore(class IRestore & );
    public struct impactdamagetable_t & GetPhysicsImpactDamageTable();
    public int TakeHealth(float ,int );
    public void CauseDeath(class CTakeDamageInfo & );
    public bool FVisible(class Vector & ,int ,class CBaseEntity ** );
    public bool FVisible(class CBaseEntity * ,int ,class CBaseEntity ** );
    public void ResetVisibilityCache(class CBaseCombatCharacter * );
    public bool FInViewCone(class Vector & );
    public bool FInViewCone(class CBaseEntity * );
    public bool FInAimCone(class Vector & );
    public bool FInAimCone(class CBaseEntity * );
    public bool ShouldShootMissTarget(class CBaseCombatCharacter * );
    public class CBaseEntity * FindMissTarget();
    public bool DispatchInteraction(int ,void * ,class CBaseCombatCharacter * );
    public bool HandleInteraction(int ,void * ,class CBaseCombatCharacter * );
    public class QAngle BodyAngles();
    public class Vector BodyDirection2D();
    public class Vector BodyDirection3D();
    public class Vector HeadDirection2D();
    public class Vector HeadDirection3D();
    public class Vector EyeDirection2D();
    public class Vector EyeDirection3D();
    public void SetTransmit(class CCheckTransmitInfo * ,bool );
    public int GiveAmmo(int ,char * ,bool );
    public int GiveAmmo(int ,int ,bool );
    public void RemoveAmmo(int ,char * );
    public void RemoveAmmo(int ,int );
    public void RemoveAllAmmo();
    public int GetAmmoCount(char * );
    public int GetAmmoCount(int );
    public enum Activity NPC_TranslateActivity(enum Activity );
    public class CBaseCombatWeapon * Weapon_Create(char * );
    public enum Activity Weapon_TranslateActivity(enum Activity ,bool * );
    public void Weapon_SetActivity(enum Activity ,float );
    public void Weapon_FrameUpdate();
    public void Weapon_HandleAnimEvent(struct animevent_t * );
    public class CBaseCombatWeapon * Weapon_OwnsThisType(char * ,int );
    public bool Weapon_CanUse(class CBaseCombatWeapon * );
    public void Weapon_Equip(class CBaseCombatWeapon * );
    public bool Weapon_EquipAmmoOnly(class CBaseCombatWeapon * );
    public bool Weapon_Detach(class CBaseCombatWeapon * );
    public void Weapon_Drop(class CBaseCombatWeapon * ,class Vector * ,class Vector * );
    public bool Weapon_Switch(class CBaseCombatWeapon * ,int );
    public class Vector Weapon_ShootPosition();
    public bool Weapon_IsOnGround(class CBaseCombatWeapon * );
    public class CBaseEntity * Weapon_FindUsable(class Vector & );
    public bool Weapon_CanSwitchTo(class CBaseCombatWeapon * );
    public bool Weapon_SlotOccupied(class CBaseCombatWeapon * );
    public class CBaseCombatWeapon * Weapon_GetSlot(int );
    public class CBaseCombatWeapon * Weapon_GetWpnForAmmo(int );
    public void Weapon_DropAll(bool );
    public bool AddPlayerItem(class CBaseCombatWeapon * );
    public bool RemovePlayerItem(class CBaseCombatWeapon * );
    public bool CanBecomeServerRagdoll();
    public int OnTakeDamage(class CTakeDamageInfo & );
    public int OnTakeDamage_Alive(class CTakeDamageInfo & );
    public int OnTakeDamage_Dying(class CTakeDamageInfo & );
    public int OnTakeDamage_Dead(class CTakeDamageInfo & );
    public void OnFriendDamaged(class CBaseCombatCharacter * ,class CBaseEntity * );
    public void NotifyFriendsOfDamage(class CBaseEntity * );
    public void OnPlayerKilledOther(class CBaseEntity * ,class CTakeDamageInfo & );
    public class Vector CalcDamageForceVector(class CTakeDamageInfo & );
    public int BloodColor();
    public enum Activity GetDeathActivity();
    public bool CorpseGib(class CTakeDamageInfo & );
    public void CorpseFade();
    public bool HasHumanGibs();
    public bool HasAlienGibs();
    public bool ShouldGib(class CTakeDamageInfo & );
    public float GetDamageAccumulator();
    public int GetDamageCount();
    public void Event_Killed(class CTakeDamageInfo & );
    public void InputKilledNPC(struct inputdata_t & );
    public void OnKilledNPC(class CBaseCombatCharacter * );
    public bool Event_Gibbed(class CTakeDamageInfo & );
    public void Event_Dying();
    public bool BecomeRagdoll(class CTakeDamageInfo & ,class Vector & );
    public void FixupBurningServerRagdoll(class CBaseEntity * );
    public bool BecomeRagdollBoogie(class CBaseEntity * ,class Vector & ,float ,int );
    public class CBaseEntity * FindHealthItem(class Vector & ,class Vector & );
    public class CBaseEntity * CheckTraceHullAttack(class Vector & ,class Vector & ,class Vector & ,class Vector & ,int ,int ,float ,bool );
    public class CBaseEntity * CheckTraceHullAttack(float ,class Vector & ,class Vector & ,int ,int ,float ,bool );
    public class CBaseCombatCharacter * MyCombatCharacterPointer();
    public void VPhysicsShadowCollision(int ,struct gamevcollisionevent_t * );
    public void VPhysicsUpdate(class IPhysicsObject * );
    public float CalculatePhysicsStressDamage(struct vphysics_objectstress_t * ,class IPhysicsObject * );
    public void ApplyStressDamage(class IPhysicsObject * ,bool );
    public void PushawayTouch(class CBaseEntity * );
    public void SetImpactEnergyScale(float );
    public void UpdateOnRemove();
    public enum Disposition_t IRelationType(class CBaseEntity * );
    public int IRelationPriority(class CBaseEntity * );
    public void SetLightingOriginRelative(class CBaseEntity * );
    protected struct Relationship_t * FindEntityRelationship(class CBaseEntity * );
    public bool IsInAVehicle();
    public class IServerVehicle * GetVehicle();
    public class CBaseEntity * GetVehicleEntity();
    public bool ExitVehicle();
    public void SetBloodColor(int );
    public class CBaseCombatWeapon * GetActiveWeapon();
    public int WeaponCount();
    public class CBaseCombatWeapon * GetWeapon(int );
    public bool RemoveWeapon(class CBaseCombatWeapon * );
    public void RemoveAllWeapons();
    public enum WeaponProficiency_t GetCurrentWeaponProficiency();
    public void SetCurrentWeaponProficiency(enum WeaponProficiency_t );
    public enum WeaponProficiency_t CalcWeaponProficiency(class CBaseCombatWeapon * );
    public class Vector GetAttackSpread(class CBaseCombatWeapon * ,class CBaseEntity * );
    public float GetSpreadBias(class CBaseCombatWeapon * ,class CBaseEntity * );
    public void DoMuzzleFlash();
    public void InitInteractionSystem();
    public void AllocateDefaultRelationships();
    public void SetDefaultRelationship(enum Class_T ,enum Class_T ,enum Disposition_t ,int );
    public enum Disposition_t GetDefaultRelationshipDisposition(enum Class_T );
    public void AddEntityRelationship(class CBaseEntity * ,enum Disposition_t ,int );
    public bool RemoveEntityRelationship(class CBaseEntity * );
    public void AddClassRelationship(enum Class_T ,enum Disposition_t ,int );
    public enum Hull_t GetHullType();
    public void SetHullType(enum Hull_t );
    public void SetAmmoCount(int ,int );
    public void SetActiveWeapon(class CBaseCombatWeapon * );
    public void ClearActiveWeapon();
    public void OnChangeActiveWeapon(class CBaseCombatWeapon * ,class CBaseCombatWeapon * );
    public bool SwitchToNextBestWeapon(class CBaseCombatWeapon * );
    public void SetRelationshipString(struct string_t );
    public float GetNextAttack();
    public void SetNextAttack(float );
    public bool m_bForceServerRagdoll;
    public bool IsAllowedToPickupWeapons();
    public void SetPreventWeaponPickup(bool );
    public bool m_bPreventWeaponPickup;
    public int LastHitGroup();
    protected void SetLastHitGroup(int );
    class NetworkVar_m_flNextAttack
    {
        public void NetworkStateChanged(void * );
    };
    public class CNetworkVarBase<float,CBaseCombatCharacter::NetworkVar_m_flNextAttack> m_flNextAttack;
    private enum Hull_t m_eHull;
    protected int m_bloodColor;
    protected float m_flFieldOfView;
    protected class Vector m_HackedGunPos;
    protected struct string_t m_RelationshipString;
    protected float m_impactEnergyScale;
    public int GetInteractionID();
    private void ThrowDirForWeaponStrip(class CBaseCombatWeapon * ,class Vector & ,class Vector * );
    private void DropWeaponForWeaponStrip(class CBaseCombatWeapon * ,class Vector & ,class QAngle & ,float );
    private int m_lastInteraction;
    private struct Relationship_t ** m_DefaultRelationship;
    private int m_LastHitGroup;
    private float m_flDamageAccumulator;
    private int m_iDamageCount;
    private enum WeaponProficiency_t m_CurrentWeaponProficiency;
    private class CUtlVector<Relationship_t,CUtlMemory<Relationship_t,int> > m_Relationship;
    private void NetworkStateChanged_m_iAmmo(void * );
    private void NetworkStateChanged_m_iAmmo();
    class NetworkVar_m_iAmmo
    {
        public int & operator[](int );
        public int & Get(int );
        public int & GetForModify(int );
        public void Set(int ,int & );
        public int * Base();
        public int Count();
        protected void NetworkStateChanged(int );
        protected int m_Value[32];
    };
    private class CBaseCombatCharacter::NetworkVar_m_iAmmo m_iAmmo;
    class NetworkVar_m_hMyWeapons
    {
        public class CHandle<CBaseCombatWeapon> & operator[](int );
        public class CHandle<CBaseCombatWeapon> & Get(int );
        public class CHandle<CBaseCombatWeapon> & GetForModify(int );
        public void Set(int ,class CHandle<CBaseCombatWeapon> & );
        public class CHandle<CBaseCombatWeapon> * Base();
        public int Count();
        protected void NetworkStateChanged(int );
        protected class CHandle<CBaseCombatWeapon> m_Value[48];
        public void NetworkVar_m_hMyWeapons(class CBaseCombatCharacter::NetworkVar_m_hMyWeapons & );
        public void NetworkVar_m_hMyWeapons();
    };
    private class CBaseCombatCharacter::NetworkVar_m_hMyWeapons m_hMyWeapons;
    class NetworkVar_m_hActiveWeapon
    {
        public void NetworkStateChanged(void * );
    };
    private class CNetworkHandleBase<CBaseCombatWeapon,CBaseCombatCharacter::NetworkVar_m_hActiveWeapon> m_hActiveWeapon;
    public class CBaseCombatCharacter & operator=(class CBaseCombatCharacter & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};