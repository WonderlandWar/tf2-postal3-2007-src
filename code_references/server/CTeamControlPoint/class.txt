class CTeamControlPoint : public CBaseAnimating
{
    public struct datamap_t m_DataMap;
    public struct datamap_t * GetBaseMap();
    public struct datamap_t * GetDataDescMap();
    public void CTeamControlPoint(class CTeamControlPoint & );
    public void CTeamControlPoint();
    public char * GetControlPointMasterName();
    public void Spawn();
    public bool KeyValue(char * ,char * );
    public void Precache();
    public int DrawDebugTextOverlays();
    public void Enable(struct inputdata_t & );
    public void Disable(struct inputdata_t & );
    public void InputReset(struct inputdata_t & );
    public void InputSetOwner(struct inputdata_t & );
    public void InputShowModel(struct inputdata_t & );
    public void InputHideModel(struct inputdata_t & );
    public void InputRoundActivate(struct inputdata_t & );
    public void ForceOwner(int );
    public void SetOwner(int ,bool ,int ,int * );
    public int GetOwner();
    public int GetDefaultOwner();
    public bool RandomOwnerOnRestart();
    public void SetActive(bool );
    public bool IsActive();
    public void AnimThink();
    public bool PointIsVisible();
    public char * GetName();
    public int GetCPGroup();
    public int GetPointIndex();
    public void SetPointIndex(int );
    public bool GetWarnOnCap();
    public struct string_t GetWarnSound();
    public int GetTeamIcon(int );
    public int GetCurrentHudIconIndex();
    public int GetHudIconIndexForTeam(int );
    public int GetHudOverlayIndexForTeam(int );
    public int GetPreviousPointForTeam(int ,int );
    public void SetCappersRequiredForTeam(int ,int );
    public void CaptureBlocked(class CBaseMultiplayerPlayer * );
    public int PointValue();
    public float LastContestedAt();
    public void SetLastContestedAt(float );
    public void UpdateCapPercentage();
    public void PlayerCapped(class CBaseMultiplayerPlayer * );
    public void PlayerBlocked(class CBaseMultiplayerPlayer * );
    private void SendCapString(int ,int ,int * );
    private void InternalSetOwner(int ,bool ,int ,int * );
    private float GetTeamCapPercentage(int );
    private int m_iTeam;
    private int m_iDefaultOwner;
    private int m_iIndex;
    private bool m_bWarnOnCap;
    private struct string_t m_iszPrintName;
    private struct string_t m_iszWarnSound;
    private bool m_bRandomOwnerOnRestart;
    struct perteamdata_t
    {
        void perteamdata_t();
        struct string_t iszCapSound;
        struct string_t iszModel;
        int iModelBodygroup;
        int iTeamPoseParam;
        int iIcon;
        struct string_t iszIcon;
        int iOverlay;
        struct string_t iszOverlay;
        int iPlayersRequired;
        int iTimedPoints;
        struct string_t iszPreviousPoint[3];
    };
    private class CUtlVector<CTeamControlPoint::perteamdata_t,CUtlMemory<CTeamControlPoint::perteamdata_t,int> > m_TeamData;
    private class COutputEvent m_OnCapReset;
    private class COutputEvent m_OnCapTeam1;
    private class COutputEvent m_OnCapTeam2;
    private class COutputEvent m_OnOwnerChangedToTeam1;
    private class COutputEvent m_OnOwnerChangedToTeam2;
    private class COutputEvent m_OnRoundStartOwnedByTeam1;
    private class COutputEvent m_OnRoundStartOwnedByTeam2;
    private int m_bPointVisible;
    private int m_iPointIndex;
    private int m_iCPGroup;
    private bool m_bActive;
    private struct string_t m_iszName;
    private bool m_bStartDisabled;
    private float m_flLastContestedAt;
    public void ~CTeamControlPoint();
    public class CTeamControlPoint & operator=(class CTeamControlPoint & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};