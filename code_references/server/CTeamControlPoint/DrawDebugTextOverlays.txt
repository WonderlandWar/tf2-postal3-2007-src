int __thiscall CTeamControlPoint::DrawDebugTextOverlays(CTeamControlPoint *this)
{
  int result; // eax
  int v3; // ebx
  int v4; // ebx
  int i; // edi
  const char **v6; // eax
  const char *v7; // eax
  int v8; // ebx
  int j; // edi
  const char **v10; // eax
  const char *v11; // eax
  int v12; // ebx
  int v13; // edi
  int k; // ebp
  char tempstr[1024]; // [esp+20h] [ebp-408h] BYREF

  result = CBaseAnimating::DrawDebugTextOverlays(this);
  v3 = result;
  if ( (this->m_debugOverlays & 1) != 0 )
  {
    V_snprintf(&tempstr[4], 1024, "INDEX: (%d)", this->m_iPointIndex);
    CBaseEntity::EntityText(this, v3, &tempstr[4], 0.0, 255, 255, 255, 255);
    v4 = v3 + 1;
    V_snprintf(&tempstr[4], 1024, "Red Previous Points: ");
    for ( i = 144; i < 156; i += 4 )
    {
      v6 = (const char **)((char *)&this->m_TeamData.m_Memory.m_pMemory->iszCapSound.pszValue + i);
      if ( *v6 )
      {
        v7 = *v6;
        if ( !v7 )
          v7 = locale;
        V_strncat(&tempstr[4], v7, 0x400u, -1);
        V_strncat(&tempstr[4], ", ", 0x400u, -1);
      }
    }
    CBaseEntity::EntityText(this, v4, &tempstr[4], 0.0, 255, 255, 255, 255);
    v8 = v4 + 1;
    V_snprintf(&tempstr[4], 1024, "Blue Previous Points: ");
    for ( j = 196; j < 208; j += 4 )
    {
      v10 = (const char **)((char *)&this->m_TeamData.m_Memory.m_pMemory->iszCapSound.pszValue + j);
      if ( *v10 )
      {
        v11 = *v10;
        if ( !v11 )
          v11 = locale;
        V_strncat(&tempstr[4], v11, 0x400u, -1);
        V_strncat(&tempstr[4], ", ", 0x400u, -1);
      }
    }
    CBaseEntity::EntityText(this, v8, &tempstr[4], 0.0, 255, 255, 255, 255);
    v12 = v8 + 1;
    v13 = 0;
    for ( k = 2980; k < 3012; k += 4 )
    {
      if ( *(CBaseTeamObjectiveResource_vtbl **)((char *)&g_pObjectiveResource->__vftable + k) == (CBaseTeamObjectiveResource_vtbl *)this->m_iPointIndex )
      {
        V_snprintf(&tempstr[4], 1024, "Base Control Point for Team %d", v13);
        CBaseEntity::EntityText(this, v12++, &tempstr[4], 0.0, 255, 255, 255, 255);
      }
      ++v13;
    }
    return v12;
  }
  return result;
}