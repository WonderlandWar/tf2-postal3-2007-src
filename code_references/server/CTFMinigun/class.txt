class CTFMinigun : public CTFWeaponBaseGun
{
    public class ServerClass * GetServerClass();
    public class SendTable * m_pClassSendTable;
    public int YouForgotToImplementOrDeclareServerClass();
    public struct datamap_t m_DataMap;
    public struct datamap_t * GetBaseMap();
    public struct datamap_t * GetDataDescMap();
    private void CTFMinigun(class CTFMinigun & );
    public void CTFMinigun();
    public void ~CTFMinigun();
	
    public void Precache();
    public int GetWeaponID();
    public void PrimaryAttack();
    public void SecondaryAttack();
    public void SharedAttack();
    public void WeaponIdle();
    public bool SendWeaponAnim(int );
    public bool CanHolster();
    public bool Holster(class CBaseCombatWeapon * );
    public bool Lower();
    public void HandleFireOnEmpty();
    public void WeaponReset();
	
    public void ItemPostFrame();
    public void ItemPreFrame();
	
    public int GetCustomDamageType();
	
    public float GetFiringTime();
	
    private void WindUp();
    private void WindDown();
	
    public void WeaponSoundUpdate();
	
    public void UpdateBarrelMovement();
	
    private void PlayWeaponShootSound();
	
    class NetworkVar_m_iWeaponState
    {
        public void NetworkStateChanged(void * );
    };
    private class CNetworkVarBase<enum MinigunState_t,CTFMinigun::NetworkVar_m_iWeaponState> m_iWeaponState;
    class NetworkVar_m_bCritShot
    {
        public void NetworkStateChanged(void * );
    };

    private class CNetworkVarBase<bool,CTFMinigun::NetworkVar_m_bCritShot> m_bCritShot;
	
    private float m_flStartedFiringAt;
    private float m_flBarrelCurrentVelocity;
    private float m_flBarrelTargetVelocity;
    private int m_iBarrelBone;
    private float m_flBarrelAngle;
    private class CSoundPatch * m_pSoundCur;
    private int m_iMinigunSoundCur;
};