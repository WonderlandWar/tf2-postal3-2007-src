void __thiscall CTFFlameEntity::FlameThink(CTFFlameEntity *this)
{
  _DWORD *DataObject; // eax
  _DWORD *v3; // ebx
  _DWORD *v4; // edi
  double v5; // st7
  double m_fValue; // st6
  double v7; // st6
  double v8; // st5
  double v9; // st7
  double v10; // st4
  double v11; // st6
  float val; // [esp+0h] [ebp-28h]
  int A; // [esp+4h] [ebp-24h]
  Vector vecVelocity; // [esp+18h] [ebp-10h] BYREF
  float v15; // [esp+24h] [ebp-4h]

  if ( this->m_flTimeRemove > (double)gpGlobals->curtime )
  {
    DataObject = CBaseEntity::GetDataObject(this, 1);
    v3 = DataObject;
    if ( DataObject )
    {
      v4 = (_DWORD *)DataObject[2];
      if ( v4 != DataObject )
      {
        do
        {
          if ( *v4 != -1
            && g_pEntityList->m_EntPtrArray[*v4 & 0xFFF].m_SerialNumber == *v4 >> 12
            && g_pEntityList->m_EntPtrArray[*v4 & 0xFFF].m_pEntity )
          {
            CTFFlameEntity::OnCollide(this, (CBaseEntity *)g_pEntityList->m_EntPtrArray[*v4 & 0xFFF].m_pEntity);
          }
          v4 = (_DWORD *)v4[2];
        }
        while ( v4 != v3 );
      }
    }
    val = tf_flamethrower_flametime.m_pParent->m_fValue - (this->m_flTimeRemove - gpGlobals->curtime);
    v5 = RemapValClamped(
           val,
           tf_flamethrower_velocityfadestart.m_pParent->m_fValue,
           tf_flamethrower_velocityfadeend.m_pParent->m_fValue,
           1.0,
           0.0);
    m_fValue = tf_flamethrower_drag.m_pParent->m_fValue;
    this->m_vecBaseVelocity.x = this->m_vecBaseVelocity.x * m_fValue;
    this->m_vecBaseVelocity.y = m_fValue * this->m_vecBaseVelocity.y;
    this->m_vecBaseVelocity.z = m_fValue * this->m_vecBaseVelocity.z;
    v7 = this->m_vecAttackerVelocity.x * v5;
    v8 = this->m_vecAttackerVelocity.y * v5;
    v9 = v5 * this->m_vecAttackerVelocity.z;
    v10 = v7 + this->m_vecBaseVelocity.x;
    v11 = tf_flamethrower_float.m_pParent->m_fValue + this->m_vecBaseVelocity.z;
    vecVelocity.y = v10;
    vecVelocity.z = v8 + this->m_vecBaseVelocity.y;
    v15 = v9 + v11;
    CBaseEntity::SetAbsVelocity(this, (Vector *)&vecVelocity.y);
    if ( tf_debug_flamethrower.m_pParent->m_nValue )
    {
      if ( this->m_hEntitiesBurnt.m_Size <= 0 )
      {
        NDebugOverlay::EntityBounds(this, 0, 100, 255, 0, 0.0);
      }
      else
      {
        A = (int)(gpGlobals->curtime * 10.0) % 255;
        NDebugOverlay::EntityBounds(this, A, 255, A, 0, 0.0);
      }
    }
    CBaseEntity::SetNextThink(this, gpGlobals->curtime, 0);
  }
  else
  {
    UTIL_Remove(this);
  }
}